plugins {
    id 'java'
    id 'scala'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}

repositories {
    jcenter()
    flatDir {
        dirs 'lib'
    }
}

defaultTasks "tinkerGraphApp"

dependencies {
    // Soot for parsing byte-code
    implementation 'org.soot-oss:soot:4.2.1'
    // Logging dependencies
    implementation 'org.apache.logging.log4j:log4j-core:2.8.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    // Gremlin dependencies
    implementation 'org.apache.tinkerpop:gremlin-core:3.4.8'
    // Graph database dependencies
    implementation 'org.apache.tinkerpop:tinkergraph-gremlin:3.4.8'
    implementation 'io.shiftleft:codepropertygraph_2.13:1.3.5'
    implementation 'io.shiftleft:semanticcpg_2.13:1.3.5'
    implementation 'org.janusgraph:janusgraph-driver:0.5.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.2'
    implementation 'com.steelbridgelabs.oss:neo4j-gremlin-bolt:0.4.4'
    implementation 'khttp:khttp:1.0.0'
    // Hashing libary
    implementation 'org.lz4:lz4-java:1.7.1'
    // Kotlin dependencies for Plume
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.72"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.72"
    // Plume library
    implementation name: 'plume-X.X.X'
}

ext {
    tinkerGraphMainClass = "com.example.TinkerGraphApp"
    overflowDbMainClass = "com.example.OverflowDbApp"
    janusGraphMainClass = "com.example.JanusGraphApp"
    tigerGraphMainClass = "com.example.TigerGraphApp"
    neptuneMainClass = "com.example.NeptuneApp"
    neo4jMainClass = "com.example.Neo4jApp"
}

task tinkerGraphApp(type: JavaExec) {
    group = "Execution"
    description = "Run an example app using the TinkerGraph backend."
    classpath = sourceSets.main.runtimeClasspath
    main = tinkerGraphMainClass
}

task overflowDbApp(type: JavaExec) {
    group = "Execution"
    description = "Run an example app using the OverflowDb backend."
    classpath = sourceSets.main.runtimeClasspath
    main = overflowDbMainClass
}

task janusGraphApp(type: JavaExec) {
    group = "Execution"
    description = "Run an example app using the JanusGraph backend."
    classpath = sourceSets.main.runtimeClasspath
    main = janusGraphMainClass
}

task tigerGraphApp(type: JavaExec) {
    group = "Execution"
    description = "Run an example app using the TigerGraph backend."
    classpath = sourceSets.main.runtimeClasspath
    main = tigerGraphMainClass
}

task neptuneApp(type: JavaExec) {
    group = "Execution"
    description = "Run an example app using the Amazon Neptune backend."
    classpath = sourceSets.main.runtimeClasspath
    main = neptuneMainClass
}

task neo4jApp(type: JavaExec) {
    group = "Execution"
    description = "Run an example app using the Neo4j backend."
    classpath = sourceSets.main.runtimeClasspath
    main = neo4jMainClass
}